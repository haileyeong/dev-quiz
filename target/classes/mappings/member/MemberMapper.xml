<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberDAO">

	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="member">
		INSERT INTO MEMBERS (ID, PWD, NAME, NICKNAME, EMAIL, PHONE, JOIN_DATE)
		VALUES (#{id}, #{pwd}, #{name}, #{nickname}, #{email}, #{phone}, NOW())
	</insert>

	<!-- 로그인 -->
	<select id="loginMember" parameterType="member" resultType="member">
		SELECT *
		FROM MEMBERS
		WHERE ID = #{id} AND PWD = #{pwd} AND IS_DEL = 0 AND IS_ADMIN = 0
	</select>

	<!-- 회원정보수정 -->
	<update id="updateMember" parameterType="member">
		UPDATE MEMBERS
		SET PWD = #{pwd},
		NICKNAME = #{nickname},
		EMAIL = #{email},
		PHONE = #{phone}
		WHERE ID = #{id}
	</update>

	<!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="member">
		DELETE FROM MEMBERS
		WHERE ID = #{id}
	</delete>

	<!-- 아이디 중복체크 -->
	<select id="idCheck" parameterType="string" resultType="int">
		SELECT COUNT(*) AS CNT
		FROM MEMBERS
		WHERE ID = #{id}
	</select>

	<!-- 아이디 찾기 -->
	<select id="searchId" parameterType="map" resultType="string">
		SELECT ID
		FROM MEMBERS
		WHERE NAME = #{name} AND EMAIL = #{email} AND IS_DEL = 0
	</select>

	<!-- 비밀번호 찾기 -->
	<select id="searchPwd" parameterType="map" resultType="string">
		SELECT PWD
		FROM MEMBERS
		WHERE ID = #{id} AND EMAIL = #{email}
	</select>

	<!-- 이메일 중복체크 -->
	<select id="emailCheck" parameterType="string" resultType="int">
		SELECT COUNT(*) AS CNT
		FROM MEMBERS
		WHERE EMAIL = #{email}
	</select>

	<!-- 회원탈퇴(논리탈퇴) -->
	<update id="deleteMemberSoft" parameterType="member">
		UPDATE MEMBERS
		SET IS_DEL = 1
		WHERE ID = #{id}
	</update>

	<!-- 비밀번호 찾기: 찾은 정보 데려오기 -->
	<select id="searchMem" parameterType="java.util.HashMap" resultType="member">
		SELECT *
		FROM MEMBERS
		WHERE ID = #{id} AND EMAIL = #{email}
	</select>

	<!-- 비밀번호 업데이트 -->
	<update id="pwdUpdate" parameterType="string">
		UPDATE MEMBERS
		SET PWD = #{pwd}
		WHERE EMAIL = #{email}
	</update>

	<!-- 관리자 로그인 -->
	<select id="adminLogin" parameterType="member" resultType="member">
		SELECT *
		FROM MEMBERS
		WHERE ID = #{id} AND PWD = #{pwd} AND IS_ADMIN = 1
	</select>

	<!-- 내 즐겨찾기 목록 -->
	<select id="myFavorite" parameterType="int" resultType="cate">
		SELECT C.CATE_NAME, C.CATE_IDX
		FROM MEMBERS M
		JOIN BOOKMARK B ON M.MEMBER_IDX = B.MEMBER_IDX
		JOIN CATEGORYS C ON B.CATE_IDX = C.CATE_IDX
		WHERE M.MEMBER_IDX = #{memberIdx}
	</select>

	<!-- 내가 쓴 글만 조회하기 -->
	<select id="myWrite" parameterType="int" resultType="community">
		SELECT *
		FROM BOARDS
		WHERE MEMBER_IDX = #{memberIdx}
	</select>

	<!-- 내 포인트 적립 목록 보기 -->
	<select id="myPoints" parameterType="int" resultType="point">
		SELECT *
		FROM POINTS
		WHERE MEMBER_IDX = #{memberIdx}
		ORDER BY POINT_DATE DESC
	</select>

	<!-- 회원 목록 조회 (관리자) -->
	<select id="admingetMemberList" parameterType="member" resultType="member">
		SELECT *
		FROM MEMBERS
		WHERE MEMBER_IDX != 0
		ORDER BY MEMBER_IDX DESC
	</select>

	<select id="admingetMemberList_I" parameterType="string" resultType="member">
		SELECT *
		FROM MEMBERS
		WHERE ID LIKE CONCAT('%', #{searchKeyword}, '%')
		AND MEMBER_IDX != 0
		ORDER BY MEMBER_IDX DESC
	</select>

	<select id="admingetMemberList_N" parameterType="string" resultType="member">
		SELECT *
		FROM MEMBERS
		WHERE NAME LIKE CONCAT('%', #{searchKeyword}, '%')
		AND MEMBER_IDX != 0
		ORDER BY MEMBER_IDX DESC
	</select>

	<!-- 회원 포인트 업데이트 -->
	<update id="adminupdateMember" parameterType="member">
		UPDATE MEMBERS
		SET POINT = #{point}
		WHERE MEMBER_IDX = #{memberIdx}
	</update>

	<!-- 회원 탈퇴 (논리적) -->
	<update id="admindeleteMember" parameterType="member">
		UPDATE MEMBERS
		SET IS_DEL = 1
		WHERE MEMBER_IDX = #{memberIdx}
	</update>

	<!-- 아이디로 게시글 수 -->
	<select id="admingetIdCnt" parameterType="int" resultType="int">
		SELECT COUNT(BOARD_IDX)
		FROM BOARDS
		WHERE MEMBER_IDX = #{memberIdx}
	</select>

	<!-- 아이디로 게시글 추출 -->
	<select id="admingetId" parameterType="int" resultType="board">
		SELECT *
		FROM BOARDS
		WHERE MEMBER_IDX = #{memberIdx}
	</select>

	<!-- 아이디로 포인트 수 -->
	<select id="admingetPointCnt" parameterType="int" resultType="int">
		SELECT IFNULL(SUM(POINT), 0)
		FROM POINTS
		WHERE MEMBER_IDX = #{memberIdx}
	</select>

	<!-- 아이디로 주문 수 -->
	<select id="adminorderCnt" parameterType="int" resultType="int">
		SELECT COUNT(ORDER_IDX)
		FROM ORDERS
		WHERE MEMBER_IDX = #{memberIdx}
	</select>

	<!-- 관리자 권한 부여 -->
	<update id="adminupdateAdmin" parameterType="member">
		UPDATE MEMBERS
		SET IS_ADMIN = 1
		WHERE MEMBER_IDX = #{memberIdx}
	</update>

	<!-- 멤버 페이징처리 -->
	<select id="adminMemberPaging" parameterType="java.util.HashMap" resultType="member">
		<![CDATA[
            SELECT F.*
            FROM (
                SELECT A.*, @rownum := @rownum + 1 AS CNUM
                FROM (SELECT * FROM MEMBERS ORDER BY MEMBER_IDX) A,
                     (SELECT @rownum := 0) r
            ) F
            WHERE F.CNUM > #{start} AND F.CNUM <= (#{start} + #{limit})
        ]]>
	</select>

	<!-- 전체 멤버 개수 구하기 -->
	<select id="adminMemberCount" resultType="Integer">
		SELECT COUNT(MEMBER_IDX) FROM MEMBERS
	</select>

	<!-- 특정 멤버 정보 조회 -->
	<select id="admingetMember" parameterType="int" resultType="member">
		SELECT MEMBER_IDX, ID, NAME, NICKNAME, EMAIL, PHONE, POINT, SCORE,
		DATE_FORMAT(JOIN_DATE, '%Y-%m-%d') AS JOIN_DATE, IS_DEL, IS_ADMIN, MEMBER_ORI, MEMBER_FILE
		FROM MEMBERS
		WHERE MEMBER_IDX = #{memberIdx}
	</select>

</mapper>